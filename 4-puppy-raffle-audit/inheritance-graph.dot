digraph "" {
Base64[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Base64</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    encode(bytes)</TD></TR><TR><TD align="left">    decode(string)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    TABLE_ENCODE</TD></TR><TR><TD align="left">    TABLE_DECODE</TD></TR></TABLE> >];

Ownable -> Context;
Ownable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Ownable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    owner()</TD></TR><TR><TD align="left">    renounceOwnership()</TD></TR><TR><TD align="left">    transferOwnership(address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyOwner()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _owner</TD></TR></TABLE> >];

ERC165 -> IERC165;
ERC165[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC165</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    supportsInterface(bytes4)</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _registerInterface(bytes4)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _INTERFACE_ID_ERC165</TD></TR><TR><TD align="left">    _supportedInterfaces</TD></TR></TABLE> >];

IERC165[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC165</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    supportsInterface(bytes4)</TD></TR></TABLE> >];

SafeMath[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>SafeMath</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    tryAdd(uint256,uint256)</TD></TR><TR><TD align="left">    trySub(uint256,uint256)</TD></TR><TR><TD align="left">    tryMul(uint256,uint256)</TD></TR><TR><TD align="left">    tryDiv(uint256,uint256)</TD></TR><TR><TD align="left">    tryMod(uint256,uint256)</TD></TR><TR><TD align="left">    add(uint256,uint256)</TD></TR><TR><TD align="left">    sub(uint256,uint256)</TD></TR><TR><TD align="left">    mul(uint256,uint256)</TD></TR><TR><TD align="left">    div(uint256,uint256)</TD></TR><TR><TD align="left">    mod(uint256,uint256)</TD></TR><TR><TD align="left">    sub(uint256,uint256,string)</TD></TR><TR><TD align="left">    div(uint256,uint256,string)</TD></TR><TR><TD align="left">    mod(uint256,uint256,string)</TD></TR></TABLE> >];

ERC721 -> Context [ label="1" ];
ERC721 -> ERC165 [ label="2" ];
ERC721 -> IERC721 [ label="3" ];
ERC721 -> IERC721Metadata [ label="4" ];
ERC721 -> IERC721Enumerable [ label="5" ];
ERC721[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC721</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    balanceOf(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    ownerOf(uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    name()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    symbol()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    tokenURI(uint256)</font></TD></TR><TR><TD align="left">    baseURI()</TD></TR><TR><TD align="left"><font color="#FFA500">    tokenOfOwnerByIndex(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    totalSupply()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    tokenByIndex(uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    approve(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getApproved(uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    setApprovalForAll(address,bool)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    isApprovedForAll(address,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transferFrom(address,address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    safeTransferFrom(address,address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    safeTransferFrom(address,address,uint256,bytes)</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _safeTransfer(address,address,uint256,bytes)</TD></TR><TR><TD align="left">    _exists(uint256)</TD></TR><TR><TD align="left">    _isApprovedOrOwner(address,uint256)</TD></TR><TR><TD align="left">    _safeMint(address,uint256)</TD></TR><TR><TD align="left">    _safeMint(address,uint256,bytes)</TD></TR><TR><TD align="left">    _mint(address,uint256)</TD></TR><TR><TD align="left">    _burn(uint256)</TD></TR><TR><TD align="left">    _transfer(address,address,uint256)</TD></TR><TR><TD align="left">    _setTokenURI(uint256,string)</TD></TR><TR><TD align="left">    _setBaseURI(string)</TD></TR><TR><TD align="left">    _checkOnERC721Received(address,address,uint256,bytes)</TD></TR><TR><TD align="left">    _approve(address,uint256)</TD></TR><TR><TD align="left">    _beforeTokenTransfer(address,address,uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _ERC721_RECEIVED</TD></TR><TR><TD align="left">    _holderTokens</TD></TR><TR><TD align="left">    _tokenOwners</TD></TR><TR><TD align="left">    _tokenApprovals</TD></TR><TR><TD align="left">    _operatorApprovals</TD></TR><TR><TD align="left">    _name</TD></TR><TR><TD align="left">    _symbol</TD></TR><TR><TD align="left">    _tokenURIs</TD></TR><TR><TD align="left">    _baseURI</TD></TR><TR><TD align="left">    _INTERFACE_ID_ERC721</TD></TR><TR><TD align="left">    _INTERFACE_ID_ERC721_METADATA</TD></TR><TR><TD align="left">    _INTERFACE_ID_ERC721_ENUMERABLE</TD></TR><TR><TD><BR/></TD></TR><TR><TD align="left" border="1"><font color="#777777" point-size="10">'supportsInterface(bytes4)' collides in inherited contracts IERC165, IERC165, IERC165, ERC165 where ERC165 is chosen.</font></TD></TR></TABLE> >];

IERC721 -> IERC165;
IERC721[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC721</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    ownerOf(uint256)</TD></TR><TR><TD align="left">    safeTransferFrom(address,address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    getApproved(uint256)</TD></TR><TR><TD align="left">    setApprovalForAll(address,bool)</TD></TR><TR><TD align="left">    isApprovedForAll(address,address)</TD></TR><TR><TD align="left">    safeTransferFrom(address,address,uint256,bytes)</TD></TR></TABLE> >];

IERC721Enumerable -> IERC721;
IERC721Enumerable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC721Enumerable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    tokenOfOwnerByIndex(address,uint256)</TD></TR><TR><TD align="left">    tokenByIndex(uint256)</TD></TR></TABLE> >];

IERC721Metadata -> IERC721;
IERC721Metadata[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC721Metadata</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    name()</TD></TR><TR><TD align="left">    symbol()</TD></TR><TR><TD align="left">    tokenURI(uint256)</TD></TR></TABLE> >];

IERC721Receiver[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC721Receiver</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    onERC721Received(address,address,uint256,bytes)</TD></TR></TABLE> >];

Address[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Address</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    isContract(address)</TD></TR><TR><TD align="left">    sendValue(address,uint256)</TD></TR><TR><TD align="left">    functionCall(address,bytes)</TD></TR><TR><TD align="left">    functionCall(address,bytes,string)</TD></TR><TR><TD align="left">    functionCallWithValue(address,bytes,uint256)</TD></TR><TR><TD align="left">    functionCallWithValue(address,bytes,uint256,string)</TD></TR><TR><TD align="left">    functionStaticCall(address,bytes)</TD></TR><TR><TD align="left">    functionStaticCall(address,bytes,string)</TD></TR><TR><TD align="left">    functionDelegateCall(address,bytes)</TD></TR><TR><TD align="left">    functionDelegateCall(address,bytes,string)</TD></TR><TR><TD align="left">    _verifyCallResult(bool,bytes,string)</TD></TR></TABLE> >];

Context[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Context</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _msgSender()</TD></TR><TR><TD align="left">    _msgData()</TD></TR></TABLE> >];

EnumerableMap[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>EnumerableMap</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _set(EnumerableMap.Map,bytes32,bytes32)</TD></TR><TR><TD align="left">    _remove(EnumerableMap.Map,bytes32)</TD></TR><TR><TD align="left">    _contains(EnumerableMap.Map,bytes32)</TD></TR><TR><TD align="left">    _length(EnumerableMap.Map)</TD></TR><TR><TD align="left">    _at(EnumerableMap.Map,uint256)</TD></TR><TR><TD align="left">    _tryGet(EnumerableMap.Map,bytes32)</TD></TR><TR><TD align="left">    _get(EnumerableMap.Map,bytes32)</TD></TR><TR><TD align="left">    _get(EnumerableMap.Map,bytes32,string)</TD></TR><TR><TD align="left">    set(EnumerableMap.UintToAddressMap,uint256,address)</TD></TR><TR><TD align="left">    remove(EnumerableMap.UintToAddressMap,uint256)</TD></TR><TR><TD align="left">    contains(EnumerableMap.UintToAddressMap,uint256)</TD></TR><TR><TD align="left">    length(EnumerableMap.UintToAddressMap)</TD></TR><TR><TD align="left">    at(EnumerableMap.UintToAddressMap,uint256)</TD></TR><TR><TD align="left">    tryGet(EnumerableMap.UintToAddressMap,uint256)</TD></TR><TR><TD align="left">    get(EnumerableMap.UintToAddressMap,uint256)</TD></TR><TR><TD align="left">    get(EnumerableMap.UintToAddressMap,uint256,string)</TD></TR></TABLE> >];

EnumerableSet[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>EnumerableSet</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _add(EnumerableSet.Set,bytes32)</TD></TR><TR><TD align="left">    _remove(EnumerableSet.Set,bytes32)</TD></TR><TR><TD align="left">    _contains(EnumerableSet.Set,bytes32)</TD></TR><TR><TD align="left">    _length(EnumerableSet.Set)</TD></TR><TR><TD align="left">    _at(EnumerableSet.Set,uint256)</TD></TR><TR><TD align="left">    add(EnumerableSet.Bytes32Set,bytes32)</TD></TR><TR><TD align="left">    remove(EnumerableSet.Bytes32Set,bytes32)</TD></TR><TR><TD align="left">    contains(EnumerableSet.Bytes32Set,bytes32)</TD></TR><TR><TD align="left">    length(EnumerableSet.Bytes32Set)</TD></TR><TR><TD align="left">    at(EnumerableSet.Bytes32Set,uint256)</TD></TR><TR><TD align="left">    add(EnumerableSet.AddressSet,address)</TD></TR><TR><TD align="left">    remove(EnumerableSet.AddressSet,address)</TD></TR><TR><TD align="left">    contains(EnumerableSet.AddressSet,address)</TD></TR><TR><TD align="left">    length(EnumerableSet.AddressSet)</TD></TR><TR><TD align="left">    at(EnumerableSet.AddressSet,uint256)</TD></TR><TR><TD align="left">    add(EnumerableSet.UintSet,uint256)</TD></TR><TR><TD align="left">    remove(EnumerableSet.UintSet,uint256)</TD></TR><TR><TD align="left">    contains(EnumerableSet.UintSet,uint256)</TD></TR><TR><TD align="left">    length(EnumerableSet.UintSet)</TD></TR><TR><TD align="left">    at(EnumerableSet.UintSet,uint256)</TD></TR></TABLE> >];

Strings[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Strings</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    toString(uint256)</TD></TR></TABLE> >];

PuppyRaffle -> ERC721 [ label="1" ];
PuppyRaffle -> Ownable [ label="2" ];
PuppyRaffle[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>PuppyRaffle</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    enterRaffle(address[])</TD></TR><TR><TD align="left">    refund(uint256)</TD></TR><TR><TD align="left">    getActivePlayerIndex(address)</TD></TR><TR><TD align="left">    selectWinner()</TD></TR><TR><TD align="left">    withdrawFees()</TD></TR><TR><TD align="left">    changeFeeAddress(address)</TD></TR><TR><TD align="left"><font color="#FFA500">    tokenURI(uint256)</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _isActivePlayer()</TD></TR><TR><TD align="left">    _baseURI()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    entranceFee</TD></TR><TR><TD align="left">    players</TD></TR><TR><TD align="left">    raffleDuration</TD></TR><TR><TD align="left">    raffleStartTime</TD></TR><TR><TD align="left">    previousWinner</TD></TR><TR><TD align="left">    feeAddress</TD></TR><TR><TD align="left">    totalFees</TD></TR><TR><TD align="left">    tokenIdToRarity</TD></TR><TR><TD align="left">    rarityToUri</TD></TR><TR><TD align="left">    rarityToName</TD></TR><TR><TD align="left">    COMMON_RARITY</TD></TR><TR><TD align="left">    RARE_RARITY</TD></TR><TR><TD align="left">    LEGENDARY_RARITY</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    commonImageUri</TD></TR><TR><TD align="left">    COMMON</TD></TR><TR><TD align="left">    rareImageUri</TD></TR><TR><TD align="left">    RARE</TD></TR><TR><TD align="left">    legendaryImageUri</TD></TR><TR><TD align="left">    LEGENDARY</TD></TR></TABLE> >];

}